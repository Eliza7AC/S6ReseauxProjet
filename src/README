############################
####### COMPTE RENDU #######
############################

Le serveur est mono thread dans la gestion des clients.
L'utilisation des Selector a été mise en place pour pouvoir gérer plusieurs clients à la fois.
La méthode SERVEURCONNECT est multi-thread: on crée un nouveau thread en créant un nouveau serveur (voir classe Server).


>>> ClientSide <<<

Ce package regroupe les classes relatives au client (Follower, Publisher, etc.)

>>> ServerSide <<<

Ce package regroupe les classes relatives au serveur. La classe ProcessingRequest permet de traiter une requête.
L'existence de cette classe permet d'alléger la classe Server.
La méthode SERVEURCONNECT va créer un nouveau thread par nouveau serveur afin qu'il y ait plusieurs serveurs
qui fonctionnent en même temps.
Ils n'utilisent pas le même port.
Le nombre de serveur est indiqué en attribut (nbOfServers) au préalable
ou bien récupéré en scannant le fichier pairs.cfg

>>> request <<<

Ce package regroupe les différents types de requêtes.
La classe mère est RequestClient qui extends les différents types de requêtes (PUBLISH, REPLY, etc.).
Cette organisation a été mise en place dans le but de factoriser le code commun à toutes les requêtes
(attributs header, body, type de la requête, demander au client les informations, etc.).
La classe RequestServer permet de traiter une requête côté server.

>>> DataNetwork <<<

Ce package regroupe les différents objets qui sont censés représentés les informations transitant sur le réseau:
Message, Stream, Subscription.

>>> Storage <<<

Ce package représente la base de données.
Une base de données a été mise en place avec les fichiers Persistence.
La classe Database se charge des opérations intermédiaires entre le serveur et la base de ajouts, tels que
l'ajout, le retrait ou la modification des informations sauvegardés en base de données.
Autre remarque: au démarrage du serveur, la base de données est chargée.



############### MORE INFO ##############


########################################
######### OPTIONAL - COMMENTS ##########
########################################

To see comments in right colors, please do the following.

Go to:
1) "File" tab
2) "Settings..." tab
3) select "Editor"
4) and then "TODO" section
5)Create a new pattern by adding the following infos:
pattern: \bINFO\b.*
foreground: 4183C0



########################################
############## COMPILING ###############
########################################

in src directory, execute:
    javac ./*/*.java
(first * matches all packages, second * matches all java classes)


(XOR compiling package by package:)
    javac ./ClientSide/*.java
    javac ./DataNetwork/*.java
    javac ./request/*.java
    javac ./ServerSide/*.java
    javac ./Storage/*.java



########################################
############### RUNNING ################
########################################

    java ServerSide/Server
    java ClientSide/Publisher



########################################
############# FUNCTIONING ##############
########################################

1)  Server is launched (ServerSide.Server Class) and listens to the network.

2)  Client is launched (Publish Class for example) and a Request object is created
    with a header and possibly body and some others info if necessary.
    The "END" word delimits the end of the request.
    Client Class is just an abstract class and each type of client (Publisher, Follower, Repost)
    extends this class.
    Same thing with RequestClient and PUBLISH, RCV_IDS, RCV_MSG, etc.

3)  The server receives the data from the client (a String object from ByteBuffer)
    and analyzes it to recreate a request object.
    At the same time, the server adds the info of the request to the database, if necessary.
    Storage.Database Class allows to handle data (stored messages, etc.)
    retrieved from Persistence files (PersistenceMsg and PersistenceSubcription).

4)  The server prepares an answer thanks to ProcessingData Class.

5)  The server sends the answer to the client.

